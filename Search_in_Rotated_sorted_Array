//Search in Rotated Sorted Array
//Problem Statement : There is an integer array nums sorted in ascending order (with distinct values).

//Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

//Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

//You must write an algorithm with O(log n) runtime complexity.

 

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1

Solution:- 

import java.util.*;
public class Main
{
    
    static int binarySearh(int arr[],int target){
        int s=0;
        int e=arr.length-1;
        while(s<=e){
            int m = s + (e-s)/2;
            
            if(arr[m] == target){
                return m;
            }
            
            if(arr[s] < arr[m]){
                //left Part
                if(arr[s] <= target && target <= arr[m]){
                    e= m-1;
                    
                }
                else{
                    s=m+1;
                }
            }
            else{
                //right part
                if(arr[m] <= target && target <= arr[e]){
                    s = m+1;
                }
                else{
                    e = m-1;
                }
            }
        }
        return -1;
    }
	public static void main(String[] args) {
		int arr[] = {7,8,9,10,11,12,13,14,15,1,2,3,4,5,6};
		int ans  =  binarySearh(arr, 14);
		if(ans == -1){
		    System.out.print("target is not exist in array");
		}
		else{
		    System.out.print("Target is Found at Index :" + ans );
		}
		
	}
}
