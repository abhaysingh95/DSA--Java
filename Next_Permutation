//Next Permutation (Leetcode Problem No.- 31)

//Solution: 
public class Main
{
    public static void nextPermutation(int arr[]){
        int pivot = -1;
        int n = arr.length;
        
        //Step1: Find Pivot
        for(int i=n-2; i>=0; i--){
            if(arr[i] < arr[i+1]){
                pivot = i;
                break;
            } 
        }
        
        
        // Step2: Swap Pivot and Last Greater Element
        if(pivot != -1){
            for(int k = n-1; k>pivot; k--){
                if(arr[k] > arr[pivot]){
                    int change = arr[pivot];
                    arr[pivot] = arr[k];
                    arr[k] = change;
                    break;
                } 
            }
        }
        
        //step3: reverse
        int i = pivot+1;
        int m = n-1;
        while(i <= m){
            int temp1 = arr[i];
            arr[i] = arr[m];
            arr[m] = temp1;
            i++;
            m--;
        }
        
        //Step4: print the Final Array
        for(int k=0; k<arr.length; k++){
            System.out.print(arr[k] + " ");
        }
        
    }
    
	public static void main(String[] args) {
	    int arr[] = {1,3,6,5,4};
	    for(int i=0; i<arr.length; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
	    nextPermutation(arr);
	}
}
